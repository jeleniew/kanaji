// import 'dart:math';
import 'package:flutter/material.dart';

/// Model reprezentujący trajektorię symbolu japońskiego
class SymbolTrajectory {
  final String symbol;
  final List<List<Offset>> strokes;

  SymbolTrajectory({required this.symbol, required this.strokes});
}

/// Przykładowa baza symboli z kreskami (normalizowane współrzędne 0..1)
final List<SymbolTrajectory> symbolDB = [
  SymbolTrajectory(
    symbol: 'あ',
    strokes: [
      [Offset(0.0,0.1647311946597523),Offset(0.025048060131245956,0.16819172331819557),Offset(0.06717059997785113,0.18017819214961528),Offset(0.10761210007865674,0.1898175198040037),Offset(0.15211280003861852,0.19970384896046214),Offset(0.2103273200194228,0.20328725146257487),Offset(0.2808557400976251,0.2021751177958941),Offset(0.3541840000227166,0.19785071078757113),Offset(0.4195344201406735,0.1899416474624043),Offset(0.49846093996246055,0.18475085447473932),Offset(0.5583536600948991,0.1820325841372376),Offset(0.6020152599790436,0.18104332431422598),Offset(0.6420365001433993,0.18153732731836614),Offset(0.6806606599784757,0.18227958563930755),Offset(0.7134054400945015,0.18129032581629606),Offset(0.7461516400076101,0.17931305998500444),Offset(0.7790369800348133,0.17474039765988023),Offset(0.8148613000230006,0.16819172331819557),Offset(0.8604808000840518,0.16324793183260067),Offset(0.9031627399812019,0.15719326049505616)],
      [Offset(0.3996643599696731,0.0),Offset(0.3886084000874594,0.018042393983695386),Offset(0.3809116801026797,0.05363317894694609),Offset(0.36314008001976344,0.10850261921897374),Offset(0.3457873200762146,0.16176466900544903),Offset(0.3257766999940367,0.2291158349277678),Offset(0.30954415994866014,0.3129020043482295),Offset(0.3031067999761472,0.37617451094956406),Offset(0.3043661599884143,0.45711828237412333),Offset(0.3127614201378337,0.5153241236461935),Offset(0.3246564800958648,0.5629013774408639),Offset(0.3313735400936496,0.6123330232231565),Offset(0.33501248001635614,0.6555858700095039),Offset(0.34228894006468585,0.6963674479604197),Offset(0.35110446015055524,0.7487643655822841),Offset(0.3613213199569518,0.7867035455372973),Offset(0.37531484000306675,0.82550660384219),Offset(0.3838506600636636,0.8614685179659115),Offset(0.3918270800737159,0.905709370760539),Offset(0.39854414007150074,0.9463668210530541)],
      [Offset(0.7511890800566782,0.29164608320816077),Offset(0.7152242001573134,0.40842889491277207),Offset(0.6354600000567918,0.5304012457903171),Offset(0.550377240084847,0.6396448695155009),Offset(0.4806879200824617,0.730350842438118),Offset(0.28995238000584933,0.8491096661592896),Offset(0.11097133997609065,0.8966881737686913),Offset(0.004478039998523421,0.8467625249822588),Offset(0.053316220045831024,0.7065007786189482),Offset(0.18835737996325555,0.5507907809510435),Offset(0.3768539000406061,0.44290629239461055),Offset(0.5657706800544066,0.38309431445171943),Offset(0.7285191800387887,0.3785229059413266),Offset(0.8740554799907997,0.4263471612380668),Offset(0.980967620107734,0.5217499241442087),Offset(0.9997188801776448,0.6293874111985718),Offset(0.9601164801526565,0.7397431685904365),Offset(0.8706962400933658,0.8384823324966211),Offset(0.7688215400254993,0.9042261079333875),Offset(0.7117258201457847,0.9398168928966382)],
    ],
  ),
  SymbolTrajectory(
    symbol: 'い',
    strokes: [
      [Offset(0.0,0.0),Offset(0.003917544210763827,0.04314129722938746),Offset(0.009373718104306024,0.1424332740808062),Offset(0.011191969602127903,0.24814724475748773),Offset(0.008814474474218655,0.3471101027786317),Offset(0.010214002949513286,0.4449202095668328),Offset(0.022104317389212296,0.5519506555646142),Offset(0.042110761465559025,0.6393876719102923),Offset(0.06043663585149106,0.7343977626602156),Offset(0.08407958292348156,0.8052034188262652),Offset(0.11555761841699987,0.8578958447494686),Offset(0.14787451935564908,0.9201377287125273),Offset(0.1743151039781526,0.9641043289985428),Offset(0.20998888609740207,0.9920961361115194),Offset(0.2641304826102199,1.0),Offset(0.31379529128218664,0.9925906496839119),Offset(0.35604373455515287,0.9682208203579209),Offset(0.3991338820734027,0.9314998462998353),Offset(0.4314493636119757,0.8937931864048861),Offset(0.4675432881538288,0.831384237045749)],
      [Offset(0.7800795715682809,0.0800259953756299),Offset(0.7860949890919104,0.0913881129629381),Offset(0.7998049744295078,0.10472494353189604),Offset(0.8125355737144139,0.12316729260501737),Offset(0.8266657014746146,0.14786791141524433),Offset(0.8462505837282814,0.18310534475615137),Offset(0.8620598617788207,0.21966092407211865),Offset(0.8740906968260795,0.26626047500033406),Offset(0.8900390760841023,0.31236551235615656),Offset(0.904169203844303,0.36061232808970745),Offset(0.9155016940539912,0.4004607663623849),Offset(0.9257142776034283,0.44146195586800485),Offset(0.9376060114432035,0.4862505179027277),Offset(0.9425015223065819,0.5346610577244355),Offset(0.9510363749657569,0.5862007324146964),Offset(0.9595698082248555,0.6352711805509147),Offset(0.9689435263291617,0.6764360941446917),Offset(0.9769177159581732,0.7126625546303843),Offset(0.9843312425570208,0.7558038518597717),Offset(0.9938454812688868,0.7921957070875822)],
    ]
  ),
  SymbolTrajectory(
    symbol: 'う',
    strokes: [
      [Offset(0.1965042947383646,0.0),Offset(0.20125613995217154,0.0006701383366704319),Offset(0.22840708162671516,0.0028137654298332586),Offset(0.27099979856308315,0.009110075319199254),Offset(0.3054472329970884,0.015005389652139703),Offset(0.33785791638474105,0.019828210785013303),Offset(0.37451254848689897,0.02532117025455742),Offset(0.42847353859238635,0.03697722753031592),Offset(0.46207390496653905,0.0415322651899155),Offset(0.49414541679364066,0.043675892283078326),Offset(0.5350422759272555,0.046757441186185605),Offset(0.5698288819218112,0.04930342314274493),Offset(0.6083480967654739,0.05171483370918169),Offset(0.634651970380165,0.053188322465674),Offset(0.6594269894478045,0.05466181122216648),Offset(0.6819948108472919,0.05640444275890376),Offset(0.7096553707041856,0.058011143598547685),Offset(0.745969109562744,0.059619203745162566),Offset(0.7889027197427115,0.05948599166201095),Offset(0.8279315527687247,0.059218208188737104)],
      [Offset(0.0,0.40340288907103605),Offset(0.03767214678380982,0.3859860888524594),Offset(0.19565550499546353,0.3389608641929998),Offset(0.35397975645071583,0.3102890022550903),Offset(0.5117943897236181,0.2938101238464581),Offset(0.6500937456419897,0.29448026218312856),Offset(0.7739688409801887,0.31055678572836415),Offset(0.8576271419889225,0.3373528040463849),Offset(0.920244754462172,0.372186404483538),Offset(0.9650429473836442,0.4226955329095014),Offset(0.99389146854399,0.4860664238944416),Offset(0.994740258286891,0.5888259529761345),Offset(0.9531650560321747,0.6948016023510573),Offset(0.8647549098096335,0.7959530712861355),Offset(0.7632789109321709,0.8763397669332267),Offset(0.7037155641869266,0.904607914700769),Offset(0.6035979732347154,0.9382358098547038),Offset(0.528932022788197,0.9563227484099507),Offset(0.4388260187629017,0.9734717651552532),Offset(0.3436272762802005,0.991826487183774)],
    ]
  ),
  SymbolTrajectory(
    symbol: 'え',
    strokes: [
      [Offset(0.21348983766898436,0.0),Offset(0.21320780918267576,0.00013261711162604163),Offset(0.2283056387086243,0.000527789312936172),Offset(0.2609006873191688,0.0019812192736868893),Offset(0.2992808989407467,0.00369720432412153),Offset(0.3372373520245209,0.004357610748683826),Offset(0.3744880180841819,0.007130513991775015),Offset(0.4099047831744956,0.01175067983014293),Offset(0.4423595333502264,0.016372185235294885),Offset(0.48059801492030907,0.018484682053823778),Offset(0.5143211774760883,0.02165275749822501),Offset(0.5474802830592503,0.0250860671658785),Offset(0.5745721971450701,0.029047166146468156),Offset(0.5977142808058857,0.032875648015431774),Offset(0.6191613303154856,0.03723325876411568),Offset(0.6475230883980352,0.043570749219702276),Offset(0.6696759249317478,0.047927020401602065),Offset(0.6946519095619111,0.05149160761409755),Offset(0.7097497390878597,0.056773519443811885),Offset(0.7240014831548824,0.05848950449424652)],
      [Offset(0.024552226092359263,0.3521265622697618),Offset(0.12586487542787433,0.35054185476416927),Offset(0.30548838887290247,0.3386585578224001),Offset(0.46705205787739934,0.331265488740941),Offset(0.6338368329203121,0.31370510776814775),Offset(0.7273872566072691,0.3200425982237344),Offset(0.6947922079967245,0.36730921220077417),Offset(0.5333702690437232,0.4739909713198751),Offset(0.3617895781168801,0.6103776238764383),Offset(0.23155111372619752,0.7408246373122931),Offset(0.07506682070862161,0.9013743955204884),Offset(0.005079375986920647,0.9829687479069266),Offset(0.21532373863833212,0.824003697204324),Offset(0.3737822310600692,0.7220760606020012),Offset(0.4815858304307304,0.6787705456055511),Offset(0.5512912466661226,0.7140225850959798),Offset(0.5909413022844308,0.8159502216983028),Offset(0.6558479394025291,0.9254035444937105),Offset(0.7516574542133198,0.9908909458681062),Offset(0.873429337548013,0.9965680298991304)],
    ]
  ),
  SymbolTrajectory(
    symbol: 'お',
    strokes: [
      [Offset(0.0,0.25753267058393403),Offset(0.005354031884156932,0.25999208893336606),Offset(0.021665005375508733,0.26564962459867547),Offset(0.05217212239736323,0.2679867583219055),Offset(0.08678888210896807,0.26884774191455296),Offset(0.12339666453162329,0.2692158435954674),Offset(0.18553021718065626,0.26577315702718585),Offset(0.22674539797082446,0.2640511898418909),Offset(0.27020300598949143,0.26392765741338065),Offset(0.31403329909683886,0.26048372304279094),Offset(0.3583613478819486,0.25568841877243703),Offset(0.4020665704002134,0.250891866699775),Offset(0.4363093816838543,0.24670923336273978),Offset(0.472419408428747,0.2394532629406457),Offset(0.5004352203832212,0.23354991022062388),Offset(0.5219776818482147,0.22936852468589689),Offset(0.5343040832388986,0.22690910633646486),Offset(0.5467555552186651,0.2234651719658751),Offset(0.5587092715206688,0.2200212375952852),Offset(0.5695424058780651,0.21633273397229122)],
      [Offset(0.3033239719892413,0.0),Offset(0.28439788618071044,0.14659930197938878),Offset(0.30581527705662154,0.3232070016683117),Offset(0.31415710634663757,0.49956888430252216),Offset(0.30992365640708835,0.6897065044190918),Offset(0.30668571782306436,0.8840242622680803),Offset(0.26646731172770477,0.9829051083778695),Offset(0.15925781343763457,0.9905304282831862),Offset(0.05677952076487621,0.8977987519481314),Offset(0.048063743046896396,0.7495997674096497),Offset(0.19823183033858754,0.6182511052408944),Offset(0.33308445549445215,0.5567581596912438),Offset(0.4653219683331374,0.5190009096478827),Offset(0.600921227005646,0.49797044954573744),Offset(0.7373921897838804,0.5117449392257886),Offset(0.8454733921796772,0.5769276362007414),Offset(0.8934133279767749,0.6711354626663788),Offset(0.8843236018308313,0.7944907032489029),Offset(0.7879459745588734,0.8977987519481314),Offset(0.6329216110607881,0.9431800740945009)],
      [Offset(0.7532066709367534,0.16972107875005144),Offset(0.7609256739599242,0.16849074567418132),Offset(0.7670276027000086,0.16886009515740397),Offset(0.7749967469013445,0.17414828133949087),Offset(0.7835887173695253,0.17845195150041987),Offset(0.7979074048105431,0.18410948716572925),Offset(0.8134730081245349,0.1887837546121893),Offset(0.8340174315554358,0.19690070862693074),Offset(0.8524470250254877,0.2071077315078817),Offset(0.8688830691059222,0.21842280283850063),Offset(0.886067010042284,0.2312140242997021),Offset(0.9031258803895631,0.24154457960916328),Offset(0.9189390982031524,0.2539664515871421),Offset(0.9351262644447054,0.26651060819132294),Offset(0.9519362569531036,0.2770869805554966),Offset(0.9626443207214171,0.2893865679072732),Offset(0.9714851690284793,0.30094620849029646),Offset(0.982443373974958,0.31152382865677813),Offset(0.9914080295318191,0.3192714331882971),Offset(0.9956414794713683,0.3224695505041744)],
    ],
  ),
  SymbolTrajectory(
    symbol: 'か',
    strokes: [
      [Offset(0.0,0.3148298217179903),Offset(0.09386643664960939,0.31908968125337656),Offset(0.21253980821231727,0.30178417071853064),Offset(0.31401122597911146,0.2895367368989735),Offset(0.3876832948425758,0.28434494867639126),Offset(0.45649490429587225,0.2890045921123718),Offset(0.5056091952859993,0.28913695299837927),Offset(0.5536029119754738,0.29419638033495404),Offset(0.5947391186670479,0.3130996758508915),Offset(0.6278985058166155,0.3679443544030255),Offset(0.6488403447220447,0.4309103187466235),Offset(0.6546999618043523,0.5231631550513236),Offset(0.6494638696997217,0.6657347379794706),Offset(0.6307657089086921,0.7718314424635334),Offset(0.6118171263213545,0.8489086980010807),Offset(0.5872593484480174,0.9033549432739063),Offset(0.547619348751559,0.948349540788763),Offset(0.49339291179840816,0.9735089141004863),Offset(0.4471445591438106,0.9842909238249598),Offset(0.3874341378028145,0.9922784981091304)],
      [Offset(0.33383122582734065,0.0),Offset(0.32834724143949545,0.015043219881145386),Offset(0.33146360157133364,0.05617774176121022),Offset(0.3362001148398947,0.10237034035656412),Offset(0.33196191565085653,0.15601701782820107),Offset(0.3199947892030263,0.22763641274986493),Offset(0.3021693104294354,0.29180037817396004),Offset(0.28646229887209024,0.3583603457590491),Offset(0.2687607662401065,0.4361021069692059),Offset(0.25729195387179943,0.4901485683414371),Offset(0.24258283523004673,0.5414005942733658),Offset(0.22488130259806297,0.6037007023230687),Offset(0.2068054020281636,0.6678646677471638),Offset(0.18848160917504997,0.7185831982712049),Offset(0.16517088125706686,0.7691693679092385),Offset(0.139615210468137,0.8222839005942734),Offset(0.12303678164990035,0.8602228525121557),Offset(0.1075789271323163,0.8901755807671532),Offset(0.09050091947800974,0.9197285251215559),Offset(0.06569398456491124,0.9593976229065372)],
      [Offset(0.8093986588521576,0.16932874122096164),Offset(0.8106457088075116,0.17651809832522966),Offset(0.8275985055636642,0.18743381955699623),Offset(0.8467962451907634,0.20660318746623443),Offset(0.8562705364844322,0.23176256077795793),Offset(0.8667414559371467,0.2599837925445706),Offset(0.8768380074519458,0.2872744462452728),Offset(0.8903013408948911,0.3185575364667747),Offset(0.9055100383727137,0.3477106969205835),Offset(0.9147339078700741,0.3730037817396003),Offset(0.9238338312258275,0.401225013506213),Offset(0.9346791186164575,0.42585224203133437),Offset(0.9449008810294107,0.44848190167477037),Offset(0.9582402683307493,0.4747069151809833),Offset(0.9662183526293027,0.4938762830902215),Offset(0.9685859768853093,0.5206334413830361),Offset(0.9731985440122632,0.5443287412209616),Offset(0.9809274712710551,0.5697555375472718),Offset(0.9870349806365772,0.5893233387358185),Offset(0.9940164367760852,0.5959792004321988)],
    ],
  ),
  SymbolTrajectory(
    symbol: 'き',
    strokes: [

    ]
  ),
  SymbolTrajectory(
    symbol: 'く',
    strokes: [

    ]
  ),
  SymbolTrajectory(
    symbol: 'け',
    strokes: [

    ]
  ),
  SymbolTrajectory(
    symbol: 'こ',
    strokes: [

    ]
  ),
  SymbolTrajectory(
    symbol: 'さ',
    strokes: [

    ]
  ),
  SymbolTrajectory(
    symbol: 'し',
    strokes: [

    ]
  ),
  SymbolTrajectory(
    symbol: 'す',
    strokes: [

    ]
  ),
  SymbolTrajectory(
    symbol: 'せ',
    strokes: [

    ]
  ),
  SymbolTrajectory(
    symbol: 'そ',
    strokes: [

    ]
  ),
  SymbolTrajectory(
    symbol: 'た',
    strokes: [

    ]
  ),
  SymbolTrajectory(
    symbol: 'ち',
    strokes: [

    ]
  ),
  SymbolTrajectory(
    symbol: 'つ',
    strokes: [

    ]
  ),
  SymbolTrajectory(
    symbol: 'て',
    strokes: [

    ]
  ),
  SymbolTrajectory(
    symbol: 'と',
    strokes: [

    ]
  ),
  SymbolTrajectory(
    symbol: 'な',
    strokes: [

    ]
  ),
  SymbolTrajectory(
    symbol: 'に',
    strokes: [

    ]
  ),
  SymbolTrajectory(
    symbol: 'ぬ',
    strokes: [

    ]
  ),
  SymbolTrajectory(
    symbol: 'ね',
    strokes: [

    ]
  ),
  SymbolTrajectory(
    symbol: 'の',
    strokes: [
      // przykładowa kreska okrągła
      [
        Offset(0.5, 0.3),
        Offset(0.6, 0.35),
        Offset(0.65, 0.45),
        Offset(0.6, 0.55),
        Offset(0.5, 0.6),
        Offset(0.4, 0.55),
        Offset(0.35, 0.45),
        Offset(0.4, 0.35),
        Offset(0.5, 0.3),
      ],
    ],
  ),
];

/// Normalizuj punkty do skali 0..1 (względem bounding box)
List<Offset> normalize(List<Offset> points) {
  if (points.isEmpty) return [];

  double minX = points.first.dx;
  double maxX = points.first.dx;
  double minY = points.first.dy;
  double maxY = points.first.dy;

  for (var p in points) {
    if (p.dx < minX) minX = p.dx;
    if (p.dx > maxX) maxX = p.dx;
    if (p.dy < minY) minY = p.dy;
    if (p.dy > maxY) maxY = p.dy;
  }

  final width = maxX - minX;
  final height = maxY - minY;

  final normalizedPoints = points.map((p) {
    final normX = width == 0 ? 0.5 : (p.dx - minX) / width;
    final normY = height == 0 ? 0.5 : (p.dy - minY) / height;
    // print('Normalizuję punkt (${p.dx.toStringAsFixed(2)}, ${p.dy.toStringAsFixed(2)}) → (${normX.toStringAsFixed(3)}, ${normY.toStringAsFixed(3)})');
    return Offset(normX, normY);
  }).toList();

  return normalizedPoints;
}


/// Resampluje punkty do dokładnie [n] punktów (równomiernie na długości trajektorii)
List<Offset> resample(List<Offset> points, int n) {
  if (points.length < 2) return points;

  // Oblicz długość trajektorii
  double pathLength(List<Offset> pts) {
    double d = 0;
    for (int i = 0; i < pts.length - 1; i++) {
      d += (pts[i] - pts[i + 1]).distance;
    }
    return d;
  }

  final I = pathLength(points) / (n - 1);
  final newPoints = <Offset>[points.first];
  double D = 0;

  for (int i = 1; i < points.length; i++) {
    final d = (points[i - 1] - points[i]).distance;
    if ((D + d) >= I) {
      final t = (I - D) / d;
      final nx = points[i - 1].dx + t * (points[i].dx - points[i - 1].dx);
      final ny = points[i - 1].dy + t * (points[i].dy - points[i - 1].dy);
      final newPoint = Offset(nx, ny);
      newPoints.add(newPoint);
      points.insert(i, newPoint); // wstaw aby nie zgubić punktów
      D = 0;
    } else {
      D += d;
    }
  }

  // jeśli jest za mało punktów, dopisz ostatni
  while (newPoints.length < n) {
    newPoints.add(points.last);
  }

  return newPoints;
}

/// Oblicza średnią odległość punktów z dwóch list (zakładamy równe długości)
double pathDistance(List<Offset> a, List<Offset> b) {
  double d = 0;
  for (int i = 0; i < a.length; i++) {
    d += (a[i] - b[i]).distance;
  }
  return d / a.length;
}

/// Porównanie dwóch trajektorii (po normalizacji i resamplingu)
bool compareStrokes(List<Offset> userStroke, List<Offset> referenceStroke,
    {double threshold = 0.05}) {
  final normalizedUser = normalize(userStroke);
  final normalizedRef = normalize(referenceStroke);

  final sampledUser = resample(normalizedUser, 64);
  final sampledRef = resample(normalizedRef, 64);

  final dist = pathDistance(sampledUser, sampledRef);
  print("Distance ${dist}");
  return dist < threshold;
}

/// Funkcja do porównania całego symbolu (kolejność kresek musi się zgadzać)
bool compareSymbol(List<List<Offset>> userStrokes, SymbolTrajectory reference,
    {double threshold = 0.05}) {
  if (userStrokes.length != reference.strokes.length) {
    print("failed ${userStrokes.length} ${reference.strokes[0].length}");
    return false;}

  for (int i = 0; i < userStrokes.length; i++) {
    if (!compareStrokes(userStrokes[i], reference.strokes[i],
        threshold: threshold)) {
      return false;
    }
  }

  return true;
}
